<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>电赛K230使用记录</title>
    <link href="/2025/08/04/25%E7%94%B5%E8%B5%9BK230%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/"/>
    <url>/2025/08/04/25%E7%94%B5%E8%B5%9BK230%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1 id="关于K230ai模型使用记录"><a href="#关于K230ai模型使用记录" class="headerlink" title="关于K230ai模型使用记录"></a>关于K230ai模型使用记录</h1><h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;作者前两天参加了25电赛，使用了<strong>嘉立创庐山派</strong>的K230。在AI识别方面遇到了一些问题，特此写一下这篇blog，记录一下。通过采集数据集、打框、训练后，导出后，官方给了我这么一段示例代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os, gc<br><span class="hljs-keyword">from</span> libs.PlatTasks <span class="hljs-keyword">import</span> DetectionApp<br><span class="hljs-keyword">from</span> libs.PipeLine <span class="hljs-keyword">import</span> PipeLine<br><span class="hljs-keyword">from</span> libs.Utils <span class="hljs-keyword">import</span> *<br><span class="hljs-comment"># Set display mode: options are &#x27;hdmi&#x27;, &#x27;lcd&#x27;, &#x27;lt9611&#x27;, &#x27;st7701&#x27;, &#x27;hx8399&#x27;</span><br><span class="hljs-comment"># &#x27;hdmi&#x27; defaults to &#x27;lt9611&#x27; (1920x1080); &#x27;lcd&#x27; defaults to &#x27;st7701&#x27; (800x480)</span><br>display_mode = <span class="hljs-string">&quot;lt9611&quot;</span><br><span class="hljs-comment"># Define the input size for the RGB888P video frames</span><br>rgb888p_size = [<span class="hljs-number">640</span>, <span class="hljs-number">480</span>]<br><span class="hljs-comment"># Set root directory path for model and config</span><br>root_path = <span class="hljs-string">&quot;/sdcard/mp_deployment_source/&quot;</span><br><span class="hljs-comment"># Load deployment configuration</span><br>deploy_conf = read_json(root_path + <span class="hljs-string">&quot;/deploy_config.json&quot;</span>)<br>kmodel_path = root_path + deploy_conf[<span class="hljs-string">&quot;kmodel_path&quot;</span>]              <span class="hljs-comment"># KModel path</span><br>labels = deploy_conf[<span class="hljs-string">&quot;categories&quot;</span>]                                <span class="hljs-comment"># Label list</span><br>confidence_threshold = deploy_conf[<span class="hljs-string">&quot;confidence_threshold&quot;</span>]        <span class="hljs-comment"># Confidence threshold</span><br>nms_threshold = deploy_conf[<span class="hljs-string">&quot;nms_threshold&quot;</span>]                      <span class="hljs-comment"># NMS threshold</span><br>model_input_size = deploy_conf[<span class="hljs-string">&quot;img_size&quot;</span>]                        <span class="hljs-comment"># Model input size</span><br>nms_option = deploy_conf[<span class="hljs-string">&quot;nms_option&quot;</span>]                            <span class="hljs-comment"># NMS strategy</span><br>model_type = deploy_conf[<span class="hljs-string">&quot;model_type&quot;</span>]                            <span class="hljs-comment"># Detection model type</span><br>anchors = []<br><span class="hljs-keyword">if</span> model_type == <span class="hljs-string">&quot;AnchorBaseDet&quot;</span>:<br>    anchors = deploy_conf[<span class="hljs-string">&quot;anchors&quot;</span>][<span class="hljs-number">0</span>] + deploy_conf[<span class="hljs-string">&quot;anchors&quot;</span>][<span class="hljs-number">1</span>] + deploy_conf[<span class="hljs-string">&quot;anchors&quot;</span>][<span class="hljs-number">2</span>]<br><span class="hljs-comment"># Inference configuration</span><br>inference_mode = <span class="hljs-string">&quot;video&quot;</span>                                          <span class="hljs-comment"># Inference mode: &#x27;video&#x27;</span><br>debug_mode = <span class="hljs-number">0</span>                                                    <span class="hljs-comment"># Debug mode flag</span><br><span class="hljs-comment"># Create and initialize the video/display pipeline</span><br>pl = PipeLine(rgb888p_size=rgb888p_size, display_mode=display_mode)<br>pl.create()<br>display_size = pl.get_display_size()<br><span class="hljs-comment"># Initialize object detection application</span><br>det_app = DetectionApp(inference_mode,kmodel_path,labels,model_input_size,anchors,model_type,confidence_threshold,nms_threshold,rgb888p_size,display_size,debug_mode=debug_mode)<br><span class="hljs-comment"># Configure preprocessing for the model</span><br>det_app.config_preprocess()<br><span class="hljs-comment"># Main loop: capture, run inference, display results</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-keyword">with</span> ScopedTiming(<span class="hljs-string">&quot;total&quot;</span>, <span class="hljs-number">1</span>):<br>        img = pl.get_frame()                          <span class="hljs-comment"># Capture current frame</span><br>        res = det_app.run(img)                        <span class="hljs-comment"># Run inference</span><br>        det_app.draw_result(pl.osd_img, res)          <span class="hljs-comment"># Draw detection results</span><br><br>        pl.show_image()                               <span class="hljs-comment"># Show result on display</span><br>        gc.collect()                                  <span class="hljs-comment"># Run garbage collection</span><br><span class="hljs-comment"># Cleanup: These lines will only run if the loop is interrupted (e.g., by an IDE break or external interruption)</span><br>det_app.deinit()                                      <span class="hljs-comment"># De-initialize detection app</span><br>pl.destroy()                                          <span class="hljs-comment"># Destroy pipeline instance</span><br></code></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;由代码可见，它新建了一个<strong>管道</strong>来采集摄像头的数据。但是当时作者已经使用了Sensor模块采集数据，两者不能同时存在。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;下面是作者原本使用的初始化方式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">sensor = Sensor() <br>sensor.reset() <br>sensor.set_framesize(width = <span class="hljs-number">640</span>,height = <span class="hljs-number">480</span>) <br>sensor.set_pixformat(Sensor.RGB565) <br>sensor.run() <br></code></pre></td></tr></table></figure><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;作者通过<a href="https://wiki.lckfb.com/zh-hans/lushan-pi-k230/api/mpp/k230_canmv_sensor_module_api.html">庐山派官方资料</a>查询得知：<strong>每个图像处理单元最多支持三个输出通道。</strong><img src="/img/K230Sensor.jpg">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;于是作者就在想是否可以通过一个摄像头，输出给两个通道，一个喂给AI识别，另一个给矩形检测。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">init_sensor</span>():<br>    sensor = Sensor(<span class="hljs-built_in">id</span> = <span class="hljs-number">2</span>)<br>    sensor.reset()<br>    sensor.set_framesize(width=DISPLAY_WIDTH, height=DISPLAY_HEIGHT,chn=CAM_CHN_ID_0)<br>    sensor.set_pixformat(sensor.GRAYSCALE,chn=CAM_CHN_ID_0)<br>    sensor.set_framesize(width = WIDTH, height = HEIGHT,chn=CAM_CHN_ID_1)<br>    sensor.set_pixformat(Sensor.RGBP888, chn=CAM_CHN_ID_1)<br>    <span class="hljs-keyword">return</span> sensor<br><br><span class="hljs-comment"># 中间部分省略...</span><br><span class="hljs-comment">#使用部分</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    clock.tick()<br>    os.exitpoint()<br>    <span class="hljs-comment"># 捕获图像 / Capture image</span><br>    img = sensor.snapshot(chn=CAM_CHN_ID_0)<br>    img.draw_cross(<span class="hljs-number">320</span>,<span class="hljs-number">240</span>)<br>    error_effect_flag = <span class="hljs-literal">False</span><br><br>    img_ai = sensor.snapshot(chn=CAM_CHN_ID_1)<br>    img_ai=img_ai.to_numpy_ref()<br></code></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;使用此方法即可通过sensor实现AI和矩形识别同时处理。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font size=3>此视觉方案已开源，开源地址:<a href="https://wiki.lckfb.com/zh-hans/lushan-pi-k230/api/mpp/k230_canmv_sensor_module_api.html">https://github.com/hccc1203/25diansaiE</a></font><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;示例视频地址:<a href="https://www.bilibili.com/video/BV1Y1hMzkELb/?spm_id_from=333.1387.homepage.video_card.click&vd_source=2a8cbc7573c206fb85016209aa7afaae">https://www.bilibili.com/video/BV1Y1hMzkELb/?spm_id_from&#x3D;333.1387.homepage.video_card.click&amp;vd_source&#x3D;2a8cbc7573c206fb85016209aa7afaae</a></p><!-- 单页面访问量（放在文章模板中） --><p align="right"><font size=2>本页总阅读量 <span id="busuanzi_page_pv">加载中...</span> 次</font></p><p align="right"><font size=2>本页总访客数 <span id="busuanzi_page_uv">加载中...</span> 人</font></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
